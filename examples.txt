Q4 examples:

; To enter a comment: 
    ; here is a comment
  
;   C CODE: if (cc) { print("Yes") } else { print("No") }
    In Q4:  cc{"Yes"}{"No"}?
    
; To display the current non-zero registers:
    IXR             ; NOTE: ra is the number of registers allocated for this instance
                    ;       ha is the "HERE" pointer, the only "special" register

; To display the current registers, code and stack:
    XIA

; To create a new function "cb" in the CODE area
    `{I.B}lp:`^           ; lp: (--) Print the current I value
                          ; Note: ` is the "compile to CODE" opcode

; xx = (aa == bb) ? cc : dd;
    aa bb={cc}{dd}?xx:

; To make sure F < T
     Q4 code:             %%>{$}0?
     Forth equivalent:    OVER OVER > IF SWAP THEN
     C equivalent:        if (f > t) { int x = f; f = t; t = x; }

; To do something (in this case, call lp) nn times:
    nn 1[lp^]             ; NOTE: nn 1[lp^] and 1 nn[lp^] are equivalent

; To print numbers from F to T:
    Q4 code:             ff tt[I.B]
    Forth equivalent:    F T FOR I . NEXT
    C equivalent:        for (int i = F; i <= T; i)) { printf("%d ", i); }

; A loop using GOTO:
    h lpg: `#.B 1- # 0{\;;}? lpg G;`\
    100 lpg^
    
; One way to copy N bytes from A to B
    dd: ss: 1[ss+ C@ dd+ C!]   ; (N F T--) copy bytes
    ; ... to create the above as a word/proc/function
    `{dd: ss: 1[ss+ C@ dd+ C!]}cb:`^
    nn aa bb cb^
    
; One way to copy N longs from A to B
    nn aa bb dd: ss: 1[ss @ dd ! ss4+ss: dd4+dd:]   ; (N F T--) copy longs

; A simple benchmark for a 100 million decrement and FOR loop:
    `{#10<{0.}0?.}nb:`^          ; nb (N--)     print N with 0 pad to 2
    `{#100<{0.}0?nbG}nc:`^       ; nc (N--)     print N with 0 pad to 3
    `{T$-1KS$."."ncG}el:`^       ; el (T--)     ELAPSED
    100KK T$ (M) el^
    100KK T$ 1[] el^

; One way to display the currently defined code:
    `{1 hM[I C@ #, ':= {I 3- C@ 125={N} 0 ? } 0 ?]}cd:`^

; To exit Q4:
    XT
