*************************************************************
*     The Q4 Virtual CPU Machine Code Reference             *
*************************************************************

*** ARITHMETIC ***
+  (a b--a+b)     addition
-  (a b--a-b)     subtraction
*  (a b--a*b)     multiplication
/  (a b--a/b)     division
K  (T--n)         multiply TOS by 1000
O  (T--n)         n: -T
M  (T--n)         n: T-1 (Minus 1)
P  (T--n)         n: T+1 (Plus 1)
S  (a n--q r)     q: a/n, r: a MODULO n (SLASHMOD)
U  (T--n)         n: the absolute value of T


*** BIT MANIPULATION ***
&    (a b--n)     n: a AND b
|    (a b--n)     n: a OR b
XOR  (a b--n)     n: a XOR b
F    (n1--n2)     n2: flip bits: (one's complement) (e.e - 1011 => 0100)
R    (V N--T)     T: V shift-right N bits
L    (V N--T)     T: V shift-left N bits


*** STACK ***
#  (a--a a)       Duplicate TOS                          (DUP)
\  (a b--a)       Drop TOS                               (DROP)
$  (a b--b a)     Swap top 2 stack items                 (SWAP)
%  (a b--a b a)   Push 2nd                               (OVER)
XS (?--)          Clear the stack, remove all entries    (0SP)


*** MEMORY ***
  NOTEs: There are 2 address spaces, USER, and ABSOLUTE
         The USER memory space is organized as follows: { REGS: (aar*4) bytes, CODE (aac*1) bytes, REST (whatever is left over) }
         ABSOLUTE addresses are the addresses of the entire machine

       E.G. - '7 4 * @' returns the value of register aah (HERE)
              'aar 1- 4* @' returns the value of the last defined REGISTER
C@    (a--n)      Fetch byte n from USER address a
C!    (n a--)     Store byte n  to  USER address a
@     (a--n)      Fetch long n from USER address a
!     (n a--)     Store long n  to  USER address a
AC@   (a--n)      Fetch byte n from ABSOLUTE address a
AC!   (n a--)     Store byte n  to  ABSOLUTE address a
A@    (a--n)      Fetch long n from ABSOLUTE address a
A!    (n a--)     Store long n  to  ABSOLUTE address a


*** REGISTERS ***
  NOTES: The registers are stored in beginning of the Q4 USER memory
  A register is identified by lowercase alpha characters, up to 3 in length: [a .. zzz]
         The maximum number of registers is 26##** = 17,576 registers.
         Register initial values:
         - b: BASE (10, not currently used)
         - h: HERE **special**
         - m: Total memory used for REGISTERS + USER
         - r: Number of registers defined
         - s: ABSOLUTE address of the system
         - u: Size of USER memory
         - All other registers set to 0
xxx:  (n--)         Set register xxx value to n
xxx   (--n)         Push value of register xxx
xxx+  (--n)         Push value of register xxx, then increment the register by 1
xxx-  (--n)         Push value of register xxx, then decrement the register by 1


*** Quotes ***
      NB: a Quote is an un-named code entity/routine. Quotes can be nested within other quotes.
{   (--n)    Begin the definition of a quote. Skip to the matching '}'.
             n: the address of first char after the '{' on the stack.
}   (--)     When defining a quote, ends the definition of the quote. 
             When executing, perform a return. (PC=rpop()).


*** Call/Goto/Return ***
^   (T--)    Call address T. (rpush(PC), PC=T)
G   (T--)    GOTO address T. (PC=T)
;   (--)     Return (PC=rpop())
;;  (--)     Double return (rpop(), PC=rpop())
      Note: this can be used to exit a routine from inside a '?' clause
            eg - num 256 > {;;}0? .;


*** INPUT/OUTPUT ***
.     (N--)       Output N as decimal number
,     (N--)       Output N as character (EMIT)
XK?   (--B)       B: 1 if a character is available, else 0.
XKY   (--C)       Retrieve 1 char C. If no key is available, wait.
B     (--)        Output a BLANK (32,)
N     (--)        Output a NEWLINE (13,10,)
Y     (N--)       Load code from block (Filename is block.NNN)
Z     (A--)       Output the NULL terminated string at address A.
"     (--)        Output characters until next '"'
_     (A--A B)    String: copy NULL terminated string to address A (eg - va_Hello World!_)
                      B: address after terminating NULL
HX    (--N)       Scan HEX number X until non-HEX digit (not case-sensitive, H3Da0 == H3dA0 )
0..9  (--N)       Scan DECIMAL number until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use 'O' (eg - '32O')
'x   (--N)        Push the ascii value of x (x: [any char possible])


*** CONDITIONS/FLOW CONTROL ***
<   (a b--f)      f: (a < b) ? 1 : 0
=   (a b--f)      f: (a = b) ? 1 : 0
>   (a b--f)      f: (a > b) ? 1 : 0
~   (x--f)        f: (x = 0) ? 1 : 0
?   (F A1 A2--)   If (F != 0), call A1 (if not 0), else call A2 (if not 0).


*** LOOPING ***
[   (F T--)      FOR: start a For/Next loop. if (T < F), swap F and T 
]   (--)         NEXT: increment index (xI) and loop if (xI < T)
E   (--)         Exit FOR loop. This only works after going through the loop at least once.
          NOTE: For loops CAN be nested
I   (-- n)        Index: push the index of the current FOR loop
J   (-- n)        Index: push the index of the parent FOR loop
(   (F--F)        BEGIN: if (F==0), skip code until ')'
)   (F--)         WHILE: if (F != 0), jump to the BEGIN (no drop), else drop F and continue.
          NOTES: 1. You can NOT nest BEGIN/WHILE loops
                 2. '()' cannot have a ')' embedded in it. Example: aaa("TE)ST"1-) fails when aaa=0.
                    USE aaa("TE"93,"ST"1-) instead.


*** OTHER ***
`      (--n)        Code: copy bytes to CODE[aah+] (eg - `{"Hello World!"}pgm:`^)
                    n: value of aah (HERE) before start of copy
T      (--n)        Time (Arduino: millis(), Windows: GetTickCount())
W      (n--)        Wait (Arduino: delay(),  Windows: Sleep())
XFO    (fn md--fh)  PC-File: open (fn/md: addr of name/mode)
XFR    (fh--c n)    PC-File: read 1 char (n=0 means EOF)
XFW    (c fh--)     PC-File: write 1 char
XFC    (fh--)       PC-File: close
XIA    (--)         Info: All (SRC)
XIC    (--)         Info: Code
XIR    (--)         Info: Registers
XIS    (--)         Info: Stack
XPI    (p--)        Arduino: pin input  (pinMode(p, INPUT))
XPU    (p--)        Arduino: pin pullup (pinMode(p, INPUT_PULLUP))
XPO    (p--)        Arduino: pin output (pinMode(p, OUTPUT)
XPRA   (p--n)       Arduino: pin read analog  (n = analogRead(p))
XPRD   (p--n)       Arduino: pin read digital (n = digitalRead(p))
XPWA   (n p--)      Arduino: pin write analog  (analogWrite(p, n))
XPWD   (n p--)      Arduino: pin write digital (digitalWrite(p, n))
XT     (--)         Exit Q4
XR     (--)         Reset Q4 to initial state
